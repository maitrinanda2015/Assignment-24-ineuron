1.
Roman numerals are represented by seven different symbols:Â I,Â V,Â X,Â L,Â C,Â DÂ andÂ M.

SymbolValue
I             1
V             5
X             10
L             50
C             100
D             500
M             1000

For example,Â `2`Â is written asÂ `II`Â in Roman numeral, just two ones added together.Â `12`Â is written asÂ `XII`, which is simplyÂ `X + II`. The numberÂ `27`Â is written asÂ `XXVII`, which isÂ `XX + V + II`.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is notÂ `IIII`. Instead, the number four is written asÂ `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written asÂ `IX`. There are six instances where subtraction is used:

- `I`Â can be placed beforeÂ `V`Â (5) andÂ `X`Â (10) to make 4 and 9.
- `X`Â can be placed beforeÂ `L`Â (50) andÂ `C`Â (100) to make 40 and 90.
- `C`Â can be placed beforeÂ `D`Â (500) andÂ `M`Â (1000) to make 400 and 900.

Given a roman numeral, convert it to an integer.

Input: s = "III"
Output: 3
Explanation: III = 3.

Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.

**Constraints:**

- `1 <= s.length <= 15`
- `s`Â contains onlyÂ the charactersÂ `('I', 'V', 'X', 'L', 'C', 'D', 'M')`.
- It isÂ **guaranteed**Â thatÂ `s`Â is a valid roman numeral in the rangeÂ `[1, 3999]`.


ans-:
import java.util.*;

class RomanToInteger {
    public int romanToInt(String s) {
        Map<Character, Integer> symbolValues = new HashMap<>();
        symbolValues.put('I', 1);
        symbolValues.put('V', 5);
        symbolValues.put('X', 10);
        symbolValues.put('L', 50);
        symbolValues.put('C', 100);
        symbolValues.put('D', 500);
        symbolValues.put('M', 1000);

        int total = 0;
        int n = s.length();

        for (int i = 0; i < n; i++) {
            int currentValue = symbolValues.get(s.charAt(i));

            if (i < n - 1) {
                int nextValue = symbolValues.get(s.charAt(i + 1));

                if (currentValue < nextValue) {
                    total -= currentValue;
                } else {
                    total += currentValue;
                }
            } else {
                total += currentValue;
            }
        }

        return total;
    }

    public static void main(String[] args) {
        RomanToInteger converter = new RomanToInteger();

        String s1 = "III";
        int result1 = converter.romanToInt(s1);
        System.out.println(s1 + " = " + result1);

        String s2 = "LVIII";
        int result2 = converter.romanToInt(s2);
        System.out.println(s2 + " = " + result2);
    }
}
2.
ğŸ’¡  **Longest Substring Without Repeating Characters**

Given a stringÂ `s`, find the length of theÂ **longest substring** without repeating characters.

**Example 1**
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

**Constraints:**

- `0 <= s.length <= 50000`
- `s`Â consists of English letters, digits, symbols and spaces.


ans-:
import java.util.*;

class LongestSubstringWithoutRepeatingCharacters {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        Set<Character> window = new HashSet<>();
        int maxLength = 0;
        int left = 0;
        int right = 0;

        while (right < n) {
            char c = s.charAt(right);
            if (!window.contains(c)) {
                window.add(c);
                maxLength = Math.max(maxLength, window.size());
                right++;
            } else {
                window.remove(s.charAt(left));
                left++;
            }
        }

        return maxLength;
    }

    public static void main(String[] args) {
        LongestSubstringWithoutRepeatingCharacters solver = new LongestSubstringWithoutRepeatingCharacters();

        String s1 = "abcabcbb";
        int result1 = solver.lengthOfLongestSubstring(s1);
        System.out.println(s1 + " -> " + result1);

        String s2 = "bbbbb";
        int result2 = solver.lengthOfLongestSubstring(s2);
        System.out.println(s2 + " -> " + result2);

        String s3 = "pwwkew";
        int result3 = solver.lengthOfLongestSubstring(s3);
        System.out.println(s3 + " -> " + result3);
    }
}
3.Given an arrayÂ `nums`Â of sizeÂ `n`, returnÂ *the majority element*.

The majority element is the element that appears more thanÂ `âŒŠn / 2âŒ‹`Â times. You may assume that the majority element always exists in the array.

Input: nums = [3,2,3]
Output: 3

Input: nums = [2,2,1,1,1,2,2]
Output: 2

**Constraints:**

- `n == nums.length`
- `1 <= n <= 5 * 10^4`
- `-10^9 <= nums[i] <= 10^9`


ans-:
class MajorityElement {
    public int majorityElement(int[] nums) {
        int count = 0;
        int candidate = 0;

        for (int num : nums) {
            if (count == 0) {
                candidate = num;
            }

            count += (num == candidate) ? 1 : -1;
        }

        return candidate;
    }

    public static void main(String[] args) {
        MajorityElement solver = new MajorityElement();

        int[] nums1 = {3, 2, 3};
        int result1 = solver.majorityElement(nums1);
        System.out.println(result1);

        int[] nums2 = {2, 2, 1, 1, 1, 2, 2};
        int result2 = solver.majorityElement(nums2);
        System.out.println(result2);
    }
}
4.Given an array of stringsÂ `strs`, groupÂ **the anagrams**Â together. You can return the answer inÂ **any order**.

AnÂ **Anagram**Â is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Input: strs = [""]
Output: [[""]]

Input: strs = ["a"]
Output: [["a"]]

**Constraints:**

- `1 <= strs.length <= 10000`
- `0 <= strs[i].length <= 100`
- `strs[i]`Â consists of lowercase English letters.

ans-:
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class GroupAnagrams {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> anagramMap = new HashMap<>();

        for (String str : strs) {
            char[] chars = str.toCharArray();
            Arrays.sort(chars);
            String sortedStr = new String(chars);

            if (!anagramMap.containsKey(sortedStr)) {
                anagramMap.put(sortedStr, new ArrayList<>());
            }

            anagramMap.get(sortedStr).add(str);
        }

        return new ArrayList<>(anagramMap.values());
    }

    public static void main(String[] args) {
        GroupAnagrams solver = new GroupAnagrams();

        String[] strs = {"eat", "tea", "tan", "ate", "nat", "bat"};
        List<List<String>> result = solver.groupAnagrams(strs);
        System.out.println(result);

        String[] strs2 = {""};
        List<List<String>> result2 = solver.groupAnagrams(strs2);
        System.out.println(result2);

        String[] strs3 = {"a"};
        List<List<String>> result3 = solver.groupAnagrams(strs3);
        System.out.println(result3);
    }
}
5.
ğŸ’¡ **Ugly Numbers**

AnÂ **ugly number**Â is a positive integer whose prime factors are limited toÂ `2`,Â `3`, andÂ `5`.

Given an integerÂ `n`, returnÂ *the*Â `nth`Â ***ugly number***.

Input: n = 10
Output: 12
Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.

Input: n = 1
Output: 1
Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.

**Constraints:**

- `1 <= n <= 1690`

ans-:
class UglyNumber {
    public int nthUglyNumber(int n) {
        int[] uglyNumbers = new int[n];
        uglyNumbers[0] = 1;

        int index2 = 0, index3 = 0, index5 = 0;
        int factor2 = 2, factor3 = 3, factor5 = 5;

        for (int i = 1; i < n; i++) {
            int min = Math.min(Math.min(factor2, factor3), factor5);
            uglyNumbers[i] = min;

            if (min == factor2) {
                index2++;
                factor2 = uglyNumbers[index2] * 2;
            }

            if (min == factor3) {
                index3++;
                factor3 = uglyNumbers[index3] * 3;
            }

            if (min == factor5) {
                index5++;
                factor5 = uglyNumbers[index5] * 5;
            }
        }

        return uglyNumbers[n - 1];
    }

    public static void main(String[] args) {
        UglyNumber solver = new UglyNumber();

        int n = 10;
        int result = solver.nthUglyNumber(n);
        System.out.println(result);

        n = 1;
        result = solver.nthUglyNumber(n);
        System.out.println(result);
    }
}
6.Given an array of stringsÂ `words`Â and an integerÂ `k`, returnÂ *the*Â `k`Â *most frequent strings*.

Return the answerÂ **sorted**Â byÂ **the frequency**Â from highest to lowest. Sort the words with the same frequency by theirÂ **lexicographical order**.

Input: words = ["i","love","leetcode","i","love","coding"], k = 2
Output: ["i","love"]
Explanation: "i" and "love" are the two most frequent words.
Note that "i" comes before "love" due to a lower alphabetical order.

Input: words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4
Output: ["the","is","sunny","day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.

**Constraints:**

- `1 <= words.length <= 500`
- `1 <= words[i].length <= 10`
- `words[i]`Â consists of lowercase English letters.
- `k`Â is in the rangeÂ `[1, The number of **unique** words[i]]`


ans-:
import java.util.*;

class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        // Create a HashMap to count the frequency of each word
        Map<String, Integer> frequencyMap = new HashMap<>();
        for (String word : words) {
            frequencyMap.put(word, frequencyMap.getOrDefault(word, 0) + 1);
        }

        // Create a PriorityQueue to keep track of the k most frequent words
        PriorityQueue<String> pq = new PriorityQueue<>(
                (a, b) -> frequencyMap.get(a).equals(frequencyMap.get(b)) ?
                        b.compareTo(a) : frequencyMap.get(a) - frequencyMap.get(b)
        );

        // Iterate through the frequencyMap and add words to the PriorityQueue
        for (String word : frequencyMap.keySet()) {
            pq.offer(word);
            if (pq.size() > k) {
                pq.poll();
            }
        }

        // Create a List to store the result in reverse order
        List<String> result = new ArrayList<>();
        while (!pq.isEmpty()) {
            result.add(0, pq.poll());
        }

        return result;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        String[] words = {"i", "love", "leetcode", "i", "love", "coding"};
        int k = 2;
        List<String> result = solution.topKFrequent(words, k);
        System.out.println(result);

        words = new String[]{"the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"};
        k = 4;
        result = solution.topKFrequent(words, k);
        System.out.println(result);
    }
}

7.You are given an array of integersÂ `nums`, there is a sliding window of sizeÂ `k`Â which is moving from the very left of the array to the very right. You can only see theÂ `k`Â numbers in the window. Each time the sliding window moves right by one position.

ReturnÂ *the max sliding window*.

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation:
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6 7         3
 1 [3  -1  -3] 5  3  6 7         3
 1  3 [-1  -3  5] 3  6 7         5
 1  3  -1 [-3  5  3] 6 7         5
 1  3  -1  -3 [5  3  6]7         6
 1  3  -1  -3  5 [3  6  7]       7

Input: nums = [1], k = 1
Output: [1]

**Constraints:**

- `1 <= nums.length <= 100000`
- -`10000 <= nums[i] <= 10000`
- `1 <= k <= nums.length`

ans-:
import java.util.*;

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        if (n == 0 || k == 0) {
            return new int[0];
        }

        int[] result = new int[n - k + 1];
        int resultIndex = 0;
        Deque<Integer> deque = new ArrayDeque<>();

        // Process the first k elements separately
        for (int i = 0; i < k; i++) {
            // Remove indices of elements smaller than the current element from the deque
            while (!deque.isEmpty() && nums[i] >= nums[deque.peekLast()]) {
                deque.removeLast();
            }
            deque.addLast(i);
        }

        // Process the remaining elements
        for (int i = k; i < n; i++) {
            // The front of the deque contains the maximum element for the current window
            result[resultIndex++] = nums[deque.peekFirst()];

            // Remove the indices that are outside the current window
            while (!deque.isEmpty() && deque.peekFirst() <= i - k) {
                deque.removeFirst();
            }

            // Remove indices of elements smaller than the current element from the deque
            while (!deque.isEmpty() && nums[i] >= nums[deque.peekLast()]) {
                deque.removeLast();
            }

            deque.addLast(i);
        }

        // Add the maximum element of the last window
        result[resultIndex] = nums[deque.peekFirst()];

        return result;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        int[] nums = {1, 3, -1, -3, 5, 3, 6, 7};
        int k = 3;
        int[] result = solution.maxSlidingWindow(nums, k);
        System.out.println(Arrays.toString(result));

        nums = new int[]{1};
        k = 1;
        result = solution.maxSlidingWindow(nums, k);
        System.out.println(Arrays.toString(result));
    }
}
8.Given aÂ **sorted**Â integer arrayÂ `arr`, two integersÂ `k`Â andÂ `x`, return theÂ `k`Â closest integers toÂ `x`Â in the array. The result should also be sorted in ascending order.

An integerÂ `a`Â is closer toÂ `x`Â than an integerÂ `b`Â if:

- `|a - x| < |b - x|`, or
- `|a - x| == |b - x|`Â andÂ `a < b`

Input: arr = [1,2,3,4,5], k = 4, x = 3
Output: [1,2,3,4]

Input: arr = [1,2,3,4,5], k = 4, x = -1
Output: [1,2,3,4]

**Constraints:**

- `1 <= k <= arr.length`
- `1 <= arr.length <= 10000`
- `arr`Â is sorted inÂ **ascending**Â order.
- -`10000 <= arr[i], x <= 10000`

ans-:
import java.util.*;

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        int left = 0;
        int right = arr.length - 1;

        while (right - left + 1 > k) {
            if (Math.abs(arr[left] - x) > Math.abs(arr[right] - x)) {
                left++;
            } else {
                right--;
            }
        }

        List<Integer> result = new ArrayList<>();
        for (int i = left; i <= right; i++) {
            result.add(arr[i]);
        }

        return result;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        int[] arr = {1, 2, 3, 4, 5};
        int k = 4;
        int x = 3;
        List<Integer> result = solution.findClosestElements(arr, k, x);
        System.out.println(result);

        k = 4;
        x = -1;
        result = solution.findClosestElements(arr, k, x);
        System.out.println(result);
    }
}







